//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;

namespace Assembly_CSharp.Generated
{
    [BurstCompile]
    public struct BoatChildrenRotationProxyGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 2596386635959590070,
                    ExcludeFromComponentCollectionHash = 0,
                    ComponentType = ComponentType.ReadWrite<BoatChildrenRotationProxy>(),
                    ComponentSize = UnsafeUtility.SizeOf<BoatChildrenRotationProxy>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public float CageRotationX;
            public float CageRotationY;
            public float CageRotationZ;
            public float CageRotationW;
            public float AxleRotationX;
            public float AxleRotationY;
            public float AxleRotationZ;
            public float AxleRotationW;
        }
        public const int ChangeMaskBits = 2;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.CageRotationX = component.CageRotation.value.x;
                snapshot.CageRotationY = component.CageRotation.value.y;
                snapshot.CageRotationZ = component.CageRotation.value.z;
                snapshot.CageRotationW = component.CageRotation.value.w;
                snapshot.AxleRotationX = component.AxleRotation.value.x;
                snapshot.AxleRotationY = component.AxleRotation.value.y;
                snapshot.AxleRotationZ = component.AxleRotation.value.z;
                snapshot.AxleRotationW = component.AxleRotation.value.w;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(componentData, componentStride*i);
                component.CageRotation = new quaternion(snapshotBefore.CageRotationX, snapshotBefore.CageRotationY, snapshotBefore.CageRotationZ, snapshotBefore.CageRotationW);
                component.AxleRotation = new quaternion(snapshotBefore.AxleRotationX, snapshotBefore.AxleRotationY, snapshotBefore.AxleRotationZ, snapshotBefore.AxleRotationW);

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(backupData, 0);
            component.CageRotation = backup.CageRotation;
            component.AxleRotation = backup.AxleRotation;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.CageRotationX != baseline.CageRotationX ||
                        snapshot.CageRotationY != baseline.CageRotationY ||
                        snapshot.CageRotationZ != baseline.CageRotationZ ||
                        snapshot.CageRotationW != baseline.CageRotationW) ? 1u : 0;
            changeMask |= (snapshot.AxleRotationX != baseline.AxleRotationX ||
                        snapshot.AxleRotationY != baseline.AxleRotationY ||
                        snapshot.AxleRotationZ != baseline.AxleRotationZ ||
                        snapshot.AxleRotationW != baseline.AxleRotationW) ? (1u<<1) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 2);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.CageRotationX, baseline.CageRotationX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.CageRotationY, baseline.CageRotationY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.CageRotationZ, baseline.CageRotationZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.CageRotationW, baseline.CageRotationW, compressionModel);
            }
            if ((changeMask & (1 << 1)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.AxleRotationX, baseline.AxleRotationX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.AxleRotationY, baseline.AxleRotationY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.AxleRotationZ, baseline.AxleRotationZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.AxleRotationW, baseline.AxleRotationW, compressionModel);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                snapshot.CageRotationX = reader.ReadPackedFloatDelta(baseline.CageRotationX, compressionModel);
                snapshot.CageRotationY = reader.ReadPackedFloatDelta(baseline.CageRotationY, compressionModel);
                snapshot.CageRotationZ = reader.ReadPackedFloatDelta(baseline.CageRotationZ, compressionModel);
                snapshot.CageRotationW = reader.ReadPackedFloatDelta(baseline.CageRotationW, compressionModel);
            }
            else
            {
                snapshot.CageRotationX = baseline.CageRotationX;
                snapshot.CageRotationY = baseline.CageRotationY;
                snapshot.CageRotationZ = baseline.CageRotationZ;
                snapshot.CageRotationW = baseline.CageRotationW;
            }
            if ((changeMask & (1 << 1)) != 0)
            {
                snapshot.AxleRotationX = reader.ReadPackedFloatDelta(baseline.AxleRotationX, compressionModel);
                snapshot.AxleRotationY = reader.ReadPackedFloatDelta(baseline.AxleRotationY, compressionModel);
                snapshot.AxleRotationZ = reader.ReadPackedFloatDelta(baseline.AxleRotationZ, compressionModel);
                snapshot.AxleRotationW = reader.ReadPackedFloatDelta(baseline.AxleRotationW, compressionModel);
            }
            else
            {
                snapshot.AxleRotationX = baseline.AxleRotationX;
                snapshot.AxleRotationY = baseline.AxleRotationY;
                snapshot.AxleRotationZ = baseline.AxleRotationZ;
                snapshot.AxleRotationW = baseline.AxleRotationW;
            }
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<BoatChildrenRotationProxy>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.CageRotation.value, backup.CageRotation.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.AxleRotation.value, backup.AxleRotation.value));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("CageRotation"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("AxleRotation"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
